use lalrpop_util::ParseError;
use std::str::FromStr;
use crate::ast::*;

grammar;

extern {
	type Error = String;
}

// ### Values ###

pub Identifier: &'input str = r"[a-zA-Z_#][a-zA-Z0-9_#]*";
pub Decimal: f64 = <s:r"[0-9]*\.[0-9]+"> => f64::from_str(s).unwrap();
pub Character: char = <s:r#"'(\\.|[^\\"])'"#> =>? Literal::unescape_char(s);
pub String: &'input str = r#""(\\.|[^\\"])*""#;
pub Boolean: bool = {
    "true" => true,
    "false" => false,
};

pub Integer: Integer = {
    <s:r"-?[0-9]+">     =>? Ok(Integer::try_from(s)?),
    <s:r"[0-9]+u8">     =>? Ok(Integer::try_from(s)?),
    <s:r"[0-9]+u16">    =>? Ok(Integer::try_from(s)?),
    <s:r"[0-9]+u32">    =>? Ok(Integer::try_from(s)?),
    <s:r"[0-9]+u64">    =>? Ok(Integer::try_from(s)?),
    <s:r"-?[0-9]+i8">   =>? Ok(Integer::try_from(s)?),
    <s:r"-?[0-9]+i16">  =>? Ok(Integer::try_from(s)?),
    <s:r"-?[0-9]+i32">  =>? Ok(Integer::try_from(s)?),
    <s:r"-?[0-9]+i64">  =>? Ok(Integer::try_from(s)?),
    <s:r"-?0x[0-9a-fA-F]+">     =>? Ok(Integer::try_from(s)?),
    <s:r"0x[0-9a-fA-F]+u8">     =>? Ok(Integer::try_from(s)?),
    <s:r"0x[0-9a-fA-F]+u16">    =>? Ok(Integer::try_from(s)?),
    <s:r"0x[0-9a-fA-F]+u32">    =>? Ok(Integer::try_from(s)?),
    <s:r"0x[0-9a-fA-F]+u64">    =>? Ok(Integer::try_from(s)?),
    <s:r"-?0x[0-9a-fA-F]+i8">   =>? Ok(Integer::try_from(s)?),
    <s:r"-?0x[0-9a-fA-F]+i16">  =>? Ok(Integer::try_from(s)?),
    <s:r"-?0x[0-9a-fA-F]+i32">  =>? Ok(Integer::try_from(s)?),
    <s:r"-?0x[0-9a-fA-F]+i64">  =>? Ok(Integer::try_from(s)?),
}

pub Literal: Literal<'input> = {
    "?" => Literal::Uninit,
	Identifier => Literal::Id(<>),
	Integer => Literal::Integer(<>),
	Decimal => Literal::Decimal(<>),
	Character => Literal::Char(<>),
	<str:String> => Literal::String(&str[1..str.len() - 1]),
	Boolean => Literal::Boolean(<>),
}

pub Expression: Expression<'input> = {
    <l:Expression> "+" <r:Factor> => l + r,
    <l:Expression> "-" <r:Factor> => l - r,

    <l:Expression> "<" <r:Factor>
        => Expression::Binary(l.into(), BinaryOperator::Lt, r.into()),

    <l:Expression> ">" <r:Factor>
        => Expression::Binary(l.into(), BinaryOperator::Gt, r.into()),

    <l:Expression> "<=" <r:Factor>
        => Expression::Binary(l.into(), BinaryOperator::Le, r.into()),

    <l:Expression> ">=" <r:Factor>
        => Expression::Binary(l.into(), BinaryOperator::Ge, r.into()),

    <l:Expression> "==" <r:Factor>
        => Expression::Binary(l.into(), BinaryOperator::Eq, r.into()),

    <l:Expression> "!=" <r:Factor>
        => Expression::Binary(l.into(), BinaryOperator::Ne, r.into()),

    <expr: Expression> "as" <ty: Type>
        => Expression::Cast(Box::new(expr), ty),

    "new" <ty: Type> "{" <values: CommaSeparatedList<NewStructValue>> "}"
        => Expression::NewStruct(NewStruct::new(ty, values)),

    <func: Expression> "(" <params: CommaSeparatedList<Expression>> ")"
        => Expression::FunctionCall(Box::new(FunctionCall { <> })),

    Factor,
};

Factor: Expression<'input> = {
    <l:Factor> "*" <r:Term> => l * r,
    <l:Factor> "/" <r:Term> => l / r,
    <l:Factor> "%" <r:Term> => l % r,
    "!" <r:Term> => !r,
    Term,
};

Term: Expression<'input> = {
    Literal => Expression::Literal(<>),
    Block => Expression::Block(<>),
    "(" <Expression> ")",
};

pub NewStructValue: (&'input str, Expression<'input>) = {
    <name: Identifier> ":" <value: Expression>
        => (name, value)
}

// ### Objects ###

pub SymbolDeclaration: SymbolDeclaration<'input> = {
    <attributes: Attribute*> <public: "pub"?> "def" <name: Identifier> ":" <symbol: Symbol>
        => SymbolDeclaration { public: public.is_some(), name, symbol, attributes }
}

pub Symbol: Symbol<'input> = {
    "struct" "{" <members: CommaSeparatedList<StructMember>> "}"
        => Symbol::Struct(Struct { <> }),

    "(" <params: CommaSeparatedList<FunctionParameter>> ")" "->" <return_ty: Type> <block: Block>
        => Symbol::Function(Function { params, return_ty, block: Some(block) }),

    "(" <params: CommaSeparatedList<FunctionParameter>> ")" "->" <return_ty: Type> ";"
            => Symbol::Function(Function { params, return_ty, block: None }),
}

pub StructMember: StructMember<'input> = {
    <name: Identifier> ":" <ty: Type>
        => StructMember { <> }
}

pub FunctionParameter: FunctionParameter<'input> = {
    <name: Identifier> ":" <ty: Type>
        => FunctionParameter { <> }
}

pub Type: Type<'input> = {
    Identifier => Type::Id(<>),
    "*" <base: Type> => Type::Pointer(Box::new(base), false),
    "&" <base: Type> => Type::Reference(Box::new(base), false),
    "*" "mut" <base: Type> => Type::Pointer(Box::new(base), true),
    "&" "mut" <base: Type> => Type::Reference(Box::new(base), true),

    "[" <base: Type> "]" => Type::Array {
        length: None,
        base: Box::new(base),
    },

    "[" <base: Type> ";"  <length: Expression> "]" => Type::Array {
        base: Box::new(base),
        length: Some(Box::new(length)),
    },
}

pub Attribute: Attribute<'input> = {
    "@" <id: Identifier> => Attribute { <>, params: vec![] },
    "@" <id: Identifier> "(" <params:CommaSeparatedList<Expression>> ")"? => Attribute { <> },
}

// ### Statements ###

pub Block: Block<'input> = {
    "{" <mut statements: Statement*> <ret: Expression?> "}"=> {
        if let Some(ret) = ret { statements.push(Statement::Expression(ret)) }
        Block { statements }
    }
}

pub Statement: Statement<'input> = {
    "let" <mutable: "mut"?> <name: Identifier> <ty: TypeSpecifier?> "=" <value: Expression> ";"
        =>? Ok(Statement::VarDecl(VarDecl::new(name, mutable.is_some(), ty, value)?)),

    <to: Expression> "=" <val: Expression> ";"
        => Statement::Assignment(to, val),

    <expr: Expression> ";" => Statement::Expression(expr),

    If => Statement::If(<>),

    "while" <condition: Expression> <block: Block>
        => Statement::While(While { <> }),

    "return" <expr: Expression?> ";" => Statement::Return(<>),

    "yield" <expr: Expression?> ";" => Statement::Yield(<>),
}

If: If<'input> = {
    "if" <condition: Expression> <block: Block> <alt: Else?>
        => If { condition, block, r#else: alt.map(|i| Box::new(i)) },
}

Else: Else<'input> = {
    "else" <block: Block> => Else::Block(block),
    "else" <if_: If> => Else::If(if_),
}

pub CompilationUnit: CompilationUnit<'input> = {
    "namespace" <namespace:Namespace> ";"
    <imports:NamespaceImport*>
    <declarations: SymbolDeclaration*>
        => CompilationUnit { <> }
}

pub NamespaceImport: NamespaceImport<'input> = {
    "import" <id:Namespace> ";"
        => NamespaceImport(id)
}

// ### Utilities ###

Namespace: &'input str = {
	<v:(Identifier "::")*> <e:Identifier> => match v.is_empty() {
	    true => e,
	    false => unsafe {
	        let start = v[0].0.as_ptr();
	        let end = e.as_ptr().add(e.len());
	        let len = end as usize - start as usize;
	        let slice = std::slice::from_raw_parts(start, len);
	        std::str::from_utf8_unchecked(slice)
	    }
	}
};

CommaSeparatedList<T>: Vec<T> = {
	<mut v:(<T> ",")*> <e:T?> => match e {
		None => v,
		Some(e) => {
			v.push(e);
			v
		}
	}
};

TypeSpecifier: Type<'input> = {
    ":" <ty: Type> => ty
}
